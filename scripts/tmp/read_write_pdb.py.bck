#!/home/qnt/majort/anaconda3/bin/python3.6
# Initial version taken from CHARMM-GUI tutorial

class Atom:
    def __init__(self, line):
        self.serial = int(line[6:11])
        self.name = line[11:16].strip()
        self.altLoc = line[16:17].strip()
        self.resName = line[17:20]
        self.chainID = line[21:22]
        self.resSeq = int(line[22:26])
        self.iCode = line[26:27].strip()
        self.x = float(line[30:38])
        self.y = float(line[38:46])
        self.z = float(line[46:54])
        self.occupancy = line[54:60].strip()
        self.tempFactor = line[60:66].strip()
        self.segID = line[72:76].strip()
        self.element = line[76:78].strip()
        self.charge = line[78:80].strip()
        if self.occupancy: self.occupancy = float(self.occupancy)
        if self.tempFactor: self.tempFactor = float(self.tempFactor)

    def __getitem__(self, key):
        return self.__dict__[key]

class Remark:
    def __init__(self, line):
        self.remark = line.strip()

#   def __getitem__(self, key):
#        return self.__dict__[key]

class PDB:
    def __init__(self, file1, file2):
        self.file = file1
        self.atoms = []
        self.remarks = []
        self.parse()

    def parse(self):
        MODEL = None
        f = open(self.file, 'r')
        for line in f.readlines():
            if line.startswith('REMARK'):
                remark = Remark(line)
                self.remarks.append(remark)
            if line.startswith('MODEL'): MODEL = int(line.split()[1])
            if line.startswith('ATOM'):
                atom = Atom(line)
                atom.MODEL = MODEL
                self.atoms.append(atom)
        f.close()

    def get_atoms(self, to_dict=True):
        """Return a list of all atoms.

        If to_dict is True, each atom is represented as a dictionary.
        Otherwise, a list of Atom objects is returned."""
        if to_dict: return [x.__dict__ for x in self.atoms]
        else: return self.atoms

    def get_model(self, model_num, to_dict=True):
        """Return all atoms where MODEL == model_num"""
        model_atoms = [x for x in self.atoms if x.MODEL == model_num]
        if to_dict:
            return [atom.__dict__ for atom in model_atoms]
        else:
            return model_atoms

#    def get_remarks(self, to_dict=True):
#        """Return a list of all remarks.

#        If to_dict is True, each remark is represented as a dictionary.
#        Otherwise, a list of Remark objects is returned."""
#        if to_dict: return [x.__dict__ for x in self.remarks]
#        else: return self.remarks

    def add_element(self):
       for atom in self.atoms:
           atom.element = atom.name[0] # Need to define special cases for Li, Be, Na, Mg, Ca, Si, Cl, Br

    def write_pdb(self, file2):
       self.file = file2
       f = open(self.file, 'w')
       line = []
       for remark in self.remarks:
           print(remark.remark, file = f)
       field = 'ATOM'
       i = 1
       for atom in self.atoms:
           line = "{:6s}{:5d} {:^4s}{:1s}{:3s} {:1s}{:4d}{:1s}   {:8.3f}{:8.3f}{:8.3f}{:6.2f}{:6.2f}          {:>2s}{:2s}"\
                  .format(field,atom.serial,atom.name,atom.altLoc,atom.resName,atom.chainID,atom.resSeq,atom.iCode,
                          atom.x,atom.y,atom.z,atom.occupancy,atom.tempFactor,atom.element,atom.charge)
           # CHARMM style
           #line = "{:6s}{:5d} {:^4s}{:1s}{:3s} {:1s}{:4d}{:1s}   {:8.3f}{:8.3f}{:8.3f}{:6.2f}{:6.2f}      {:4s}{:>2s}{:2s}"\
           #       .format(field,atom.serial,atom.name,atom.altLoc,atom.resName,atom.chainID,atom.resSeq,atom.iCode,
           #               atom.x,atom.y,atom.z,atom.occupancy,atom.tempFactor,atom.segID,atom.element,atom.charge)
           print(line, file = f)
           i += 1
       field = 'TER'
       line = "{:6s}{:5d}      {:3s} {:1s}{:4d}".format(field,i,atom.resName,atom.chainID,atom.resSeq)
       print(line, file = f)
       line = "END"
       print(line, file = f)
       f.close()

#def main():
#    import sys
#    pdb = PDB(sys.argv[1])
#    atoms = pdb.get_atoms(to_dict=False)
#    pdb.add_element()
#    pdb.print_atoms()

#if __name__ == '__main__':
#    main()


