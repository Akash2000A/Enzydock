************************************************************
*                  Start mm_cluster.inp                    *
************************************************************
* Docking the ligand into the protein, with mm (no grid)
*

set currligand 1

! Read topology and parameter files
!stream @strDIR/top_prm_all.str

! Read protein
!stream @strDIR/read_protein.str

! Read cofactors
!if @cofactor .eq. true then stream @strDIR/generate_cofactors.str

!set currligand 1

label mm_loop

  ! Read in number of clusters written by clustering program
  stream nclusters@currligand.str

  goto write_mm_clust_dat
  label after_write_mm_clust_dat

  ! Reads in a new ligand
!  bomlev -1   ! Where is level increased again? Check...
  open unit 101 read form name @topDIR/ligand_@currligand.str
  if ?iostat .ne. -1 then
     stream @topDIR/ligand_@currligand.str
  else
    ! This is a critical warning
    echo EnzyDock WARNING: Ligand rtf/prm file not found.
    ! Update readable log file
!    open append unit 33 form name enzydock.log
    write title unit 33
* EnzyDock WARNING: Ligand rtf/prm file not found.
* Terminating EnzyDock run...
*
    close unit 33
    stop
  endif
  bomlev @bomblevel

  set iter 1

  label mm_cluster_loop

    ! If no grid used just read complete system below
    if @usegrid .eq. false goto mm_read_all

    stream @strDIR/read_protein.str  ! Protein must be read in each time (patching)
    bomlev -1
    ! Patch catalytic residues (in full protein representation)
    stream @strDIR/patch_offgrid.str

    ! Read cofactors
    if @numcofactor .gt. 0 then 
       stream @strDIR/generate_cofactors.str
       if patch_cofact .eq. true stream @strDIR/cofact_patch_offgrid.str ! Read cofactor patching
    endif
    set NumObject ?nres

    ! Read minimum ligand structure
    open unit 1 form read name @psfDIR/@currligand_@runid_0.psf
    read psf card unit 1 append
    close unit 1
    
    ! Open best pose from clusters
    open read unit 1 form name @resDIR/@currligand_@proj_cluster@iter/min_clust@iter_@currligand_@runid.crd
    read coor card unit 1 offset @NumObject
    close unit 1

!->RS
    ! Covalent link between ligand and cofactor
    if @{patch_lig_cofact} .eq. true then
       stream @strDIR/cov_ligcofac.str  ! Patch covalent link between ligand and cofactor
    endif
    bomlev -1
!<-RS

    ! Since flexible residue was written in as resi 1,...,n, we need to copy 
    ! coordinates from this resi into the actual sequence position in
    ! the protein.
    !define flex sele none end
    if @flexibledocking .eq. true then

       set b 1
       label read_copy_flex_min

        if @numflex@@b .lt. 1 goto skip_read_copy_flex_min

          set NumObject ?nres

          ! Read flexible part of protein
          open read unit 1 form name @resDIR/@currligand_@proj_cluster@iter/flex@b_min_clust@iter_@currligand_@runid.pdb
          read sequ pdb unit 1
          generate FLX@b first none last none setup
          rewind unit 1
          ! Patch flexible catalytic residues in grid representation
          ! --->
          if @patchcountligp@@{currligand}@@{b} .lt. 1 goto after_patch_mm
          ! maybe - @?var... .eq. 0 goto and aviod checking at the beginning
          set patchnum 1
          label patch_mm
                      set pname @patchnamelig@@{currligand}p@@{b}n@@{patchnum}
                      set pflex @patchflexlig@@{currligand}p@@{b}n@@{patchnum}
                      patch @pname FLX@b @pflex
              incr patchnum
          if @patchnum .le. @patchcountligp@@{currligand}@@{b} goto patch_mm
          label after_patch_mm
          !stream @strDIR/patch_ongrid.str
          ! <----
          read coor pdb unit 1 offset @NumObject
          close unit 1

          set c 1
          label flex_copy_loop
             print coor sele segi FLX@b .and. resi @c show end
             print coor sele segi pep@b .and. (resi @flex@@b@@c) show end
             coor duplicate sele segi FLX@b .and. resi @c show end sele segi pep@b .and. (resi @flex@@b@@c) show end
             print coor sele segi pep@b .and. (resi @flex@@b@@c) show end

             dele atoms sele segi FLX@b .and. resi @c show end
             incr c
          if c .le. @numflex@@b goto flex_copy_loop

        label skip_read_copy_flex_min

        incr b

       if b .le. @proteinunit goto read_copy_flex_min

       ! Covalent docking setup
       if @covalent .eq. true then
          stream @strDIR/cov_generate_offgrid.str
       endif

       set b 1
       define flex sele none end  ! Define here after covalent patch which can change number of atoms
       label define_flex_loop1

         if @numflex@@b .lt. 1 goto skip_define_flex_loop1

          set c 1
          label define_flex_loop2
             define flex sele flex .or. segi pep@b .and. (resi @flex@@b@@c) show end
             incr c
          if c .le. @numflex@@b goto define_flex_loop2

         label skip_define_flex_loop1

         incr b

       if b .le. @proteinunit goto define_flex_loop1

    endif

    ! Allow a non-integer sum of charges
    bomlev -1
    if @tagwtin .eq. true then
      set NumObject ?nres
      open unit 1 form read name @resDIR/@currligand_@proj_cluster@iter/waterin_min_clust@iter_@currligand_@runid.pdb
      read sequ pdb unit 1
      generate WTIN setup angle nodihedral
      rewind unit 1
      read coor pdb unit 1 offset @NumObject
      close unit 1
      set water true
    endif

    if @tagwout .eq. true then
      set NumObject ?nres
      open unit 1 form read name @pdbDIR/waterout.pdb
      read sequ pdb unit 1
      generate WOUT setup angle nodihedral
      rewind unit 1
      read coor pdb unit 1 offset @NumObject
      close unit 1
      set water true
    endif

    if tagwexp .eq. true then
       set NumObject ?nres
      open unit 1 form read name @resDIR/@currligand_@proj_cluster@iter/waterexpl_min_clust@iter_@currligand_@runid.pdb
      read sequ pdb unit 1
      generate EWAT setup angle nodihedral
      rewind unit 1
      read coor pdb unit 1 offset @NumObject
      close unit 1
      set water true
    endif
    bomlev @bomblevel

    if @water .eq. true then 
    ! re-define flexible residues
      if @flexibledocking .eq. true then
        set b 1
        define flex sele none end  ! Define here after covalent patch which can change number of atoms
        label define_flex_loop3

          if @numflex@@b .lt. 1 goto skip_define_flex_loop3

          set c 1
          label define_flex_loop4
            define flex sele flex .or. segi pep@b .and. (resi @flex@@b@@c) show end
            incr c
          if c .le. @numflex@@b goto define_flex_loop4

          label skip_define_flex_loop3

          incr b

        if b .le. @proteinunit goto define_flex_loop3

      endif
    endif
!    ! Backbone atoms are not flexible unless specifically defined as flexible
!    define back sele type N .or. type C .or. type O .or. type CA .or. type HN .or. type HA end

!    ! If backbone atoms are flexible
!    if flexibleback .eq. true then
!       stream @strDIR/back_flex.str
!       define back sele back .and. .not. fback end
!    endif

!    ! Define flexible region
!    define flexx sele flex .and. .not. back show end

    goto skip_mm_read_all   ! If grid was used, skip the next few lines

    ! If no grid used just read complete system
    label mm_read_all

       ! Read minimum ligand structure
       open unit 1 form read name @psfDIR/mindock_@currligand.psf
       read psf card unit 1
       close unit 1

       open read unit 1 form name @resDIR/mindock_@currligand.crd
       read coor card unit 1
       close unit 1

    label skip_mm_read_all

    set c 1
    define cofactors sele none end
    label read_qcofactors
       define cofactors sele cofactors .or. segi COF@c show end
       incr c
    if c .le. @numcofactor goto read_qcofactors

    ! Remove harmonic restraints for final MM minimization, but read in NOEs
    define ligand sele segid ligand_@currligand show end
    stream @strDIR/clear_restraints.str
    bomlev -1
    open unit 101 read form name @stdDIR/userrestraints.str
    if ?iostat .ne. -1 then
       stream @stdDIR/userrestraints.str pep
    else
       echo EnzyDock WARNING: userrestraints.str file missing!
       echo EnzyDock WARNING: See documentation
       ! Update readable log file
!       open append unit 33 form name enzydock.log
       write title unit 33
* EnzyDock WARNING: userrestraints.str file missing!
* EnzyDock WARNING: See documentation
*
!       close unit 33
    endif
    bomlev @bomblevel

    ! Backbone atoms are not flexible unless specifically defined as flexible
    if @flexibledocking .eq. true then
       define back sele segi pep* .and. (type N .or. type C .or. type O .or. type CA -
                     .or. type HN .or. type HA .or. type HA2) show end
    endif

    ! KR + RS: check for no grid option!
    define flexwat sele none end
    if @water .eq. true then 
      define flexwat sele segid WTIN end
    endif
    if tagwexp .eq. true then
      define flexwat sele flexwat .or. segid EWAT show end
    endif

 !   define back sele type N .or. type C .or. type O .or. type CA .or. type HN .or. type HA end

   !  If backbone atoms are flexible. Must be after clear_restraints.str since it includes 
   !  backbone restraints
 !   if flexibleback .eq. true then
 !      stream @strDIR/back_flex.str
 !      define back sele back .and. .not. fback end
 !   endif

   !  Define flexible region
  !  define flexx sele flex .and. .not. back show end

    cons fix sele none end
    if @flexibledocking .eq. true then
       if @flexibleback .eq. true then 
          define flexx sele flex show end
       else
          define flexx sele flex .and. .not. back show end
       endif
       if @water .eq. true then
         cons fix sele .not. (ligand .or. cofactors .or. flexx .or. flexwat) end
       else
         cons fix sele .not. (ligand .or. cofactors .or. flexx) end
       endif
    else
       if @water .eq. true then
         cons fix sele .not. (ligand .or. cofactors .or. flexwat) end
       else
         cons fix sele .not. (ligand .or. cofactors) end
      endif
    endif
    ! If minimization radius is set, do minimization of nearby residues as well
    ! This definition overrides earlier fixes
    if @minradius .gt. 0.0 then
       define flexradius sele .byres. (ligand .or. (ligand .around. @minradius)) show end
       if ?nsel .gt. 0 then
          cons fix sele .not. flexradius end
       endif
    endif
!    noe 
!       reset
!    end
    ! Update readable log file
!    open append unit 33 form name enzydock.log
    write title unit 33
* Performing MM minimization of cluster # @iter (out of @ncluster)
*    of ligand_@currligand inside protein
*
!    close unit 33

    nbonds atom eps @mmeps @mmdielec cutnb @ctnb ctofnb @ctfnb ctonnb @ctonb -
       vswitch switch @softoff

    mini abnr nstep @mmstep nprint @mmprint

    ! Here not calculated on grid, so this line is ok
    !if @flexibleback .eq. true then stream @strDIR/back_clear_restraints.str   ! Remove restraints on backbone atoms
    set etot ?ener

    inte sele ligand end sele .not. ligand end

    ! Interaction energy should also include bestfit and noe restraints
    set intere0 ?ener 
    energy
    calc intere = @intere0 + ?harm + ?noe 

    open write unit 1 form name @resDIR/@currligand_@proj_cluster@iter/lig_mm_min_clust@iter_@currligand_@runid.crd
    write coor card unit 1 sele ligand show end
    *  etot: total energy
    *  intere: interaction energy + restraint energy
    *  intere0: interaction energy
    *  clustiter: cluster number
    *  currligand: @currligand
    *  runid: @runid
    *  etot   intere    intere0       clustiter
    * ===========================================
    * @etot @intere @intere0 kcal/mol  clust@iter
    * 

    open unit 1 form write name @resDIR/@currligand_@proj_cluster@iter/lig_mm_min_clust@iter_@currligand_@runid.pdb
    write coor pdb unit 1 sele ligand show end
    *  etot: total energy
    *  intere: interaction energy + restraint energy
    *  intere0: interaction energy
    *  clustiter: cluster number
    *  currligand: @currligand
    *  runid: @runid
    *  etot   intere    intere0       clustiter
    * ===========================================
    * @etot @intere @intere0 kcal/mol  clust@iter
    *
    close unit 1

    ! Unit 3 was opened in enzydock.inp
    write title unit 3
    * @etot @intere @intere0 clust@iter

    ! RS - only once for each ligand ->
    if @iter .eq. 1 then
      open write unit 1 form name @psfDIR/all_mm_mindock_@currligand.psf
      write psf card unit 1
      close unit 1
    endif
    ! <- RS - only once for each ligand

    open write unit 1 form name @resDIR/@currligand_@proj_cluster@iter/all_mm_min_clust@iter_@currligand_@runid.crd
    write coor card unit 1

    open unit 1 form write name @resDIR/@currligand_@proj_cluster@iter/all_mm_min_clust@iter_@currligand_@runid.pdb
    write coor pdb unit 1
    close unit 1

    if @flexibledocking .eq. true then

       if @numcofactor .gt. 0 then
          open write unit 1 form name @resDIR/@currligand_@proj_cluster@iter/lig_co_flex_mm_min_clust@iter_@currligand_@runid.crd
          write coor card unit 1 sele ligand .or. cofactors .or. flex show end

          open unit 1 form write name @resDIR/@currligand_@proj_cluster@iter/lig_co_flex_mm_min_clust@iter_@currligand_@runid.pdb
          write coor pdb unit 1 sele ligand .or. cofactors .or. flex show end
          close unit 1
       endif

       open write unit 1 form name @resDIR/@currligand_@proj_cluster@iter/lig_flex_mm_min_clust@iter_@currligand_@runid.crd
       write coor card unit 1 sele ligand .or. flex show end
       *  etot: total energy
       *  intere: interaction energy + restraint energy
       *  intere0: interaction energy
       *  clustiter: cluster number
       *  currligand: @currligand
       *  runid: @runid
       *  etot     intere    intere0       clustiter
       * =============================================
       * @etot @intere @intere0 kcal/mol  clust@iter
       *

       open unit 1 form write name @resDIR/@currligand_@proj_cluster@iter/lig_flex_mm_min_clust@iter_@currligand_@runid.pdb
       write coor pdb unit 1 sele ligand .or. flex show end
       *  etot: total energy
       *  intere: interaction energy + restraint energy
       *  intere0: interaction energy
       *  clustiter: cluster number
       *  currligand: @currligand
       *  runid: @runid
       *  etot     intere    intere0       clustiter
       * =============================================
       * @etot @intere @intere0 kcal/mol  clust@iter
       *
       close unit 1

       open write unit 1 form name @resDIR/@currligand_@proj_cluster@iter/flex_mm_min_clust@iter_@currligand_@runid.crd
       write coor card unit 1 sele flex show end

       open unit 1 form write name @resDIR/@currligand_@proj_cluster@iter/flex_mm_min_clust@iter_@currligand_@runid.pdb
       write coor pdb unit 1 sele flex show end
       close unit 1
    endif

    if @numcofactor .gt. 0 then
       open write unit 1 form name @resDIR/@currligand_@proj_cluster@iter/lig_co_mm_min_clust@iter_@currligand_@runid.crd
       write coor card unit 1 sele ligand .or. cofactors show end

       open unit 1 form write name @resDIR/@currligand_@proj_cluster@iter/lig_co_mm_min_clust@iter_@currligand_@runid.pdb
       write coor pdb unit 1 sele ligand .or. cofactors show end
       close unit 1
    endif

    !print coor

    incr iter

    stream @strDIR/clear_all_restraints.str ! DTM

    dele atoms sele all end

  if @iter .le. @ncluster goto mm_cluster_loop  

  incr currligand

!  bomlev -1 ! Needed for non-integer charge for covalent docking
!  if @numcofactor .gt. 0 then
!     dele atoms sele ligand .or. cofactors end
!  else
!     dele atoms sele ligand end
!  endif
!  bomlev @bomblevel

! This delete must be here unless deleted above inside mm_cluster_loop
!  dele atoms sele all end

if @currligand .le. @numligands goto mm_loop

!dele atoms sele all end

return

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                  START WRITE_DAT
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
label write_mm_clust_dat

    ! Starts writing the output summary file
    open write unit 3 form name @resDIR/@currligand_summary_mm_@runid.dat
    write title unit 3
**
*  Summary for ligand number @currligand
*  etot: total ligand energy
*  intere: interaction energy + restraint energy
*  intere0: interaction energy
*  clustiter: cluster number
*  currligand: @currligand
*  runid: @runid
*  etot     intere    intere0    clustmiter
* ==========================================
* 

goto after_write_mm_clust_dat

